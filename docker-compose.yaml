services:
  mongodb:
    container_name: mongodb 
    build:
      context: ./mongodb
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: best_combination
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data/redis
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-service:
    container_name: api-service
    ports:
      - "8000:8000"
    build:
      context: .
      dockerfile: ./apps/best_combination_api/Dockerfile
    environment:
      MONGODB_URI: ${MONGODB_URI_INTERNAL}
      REDIS_URL: ${REDIS_URL_INTERNAL}
      RABBITMQ_URL: ${RABBITMQ_URL_INTERNAL}
      TASK_QUEUE_NAME: ${TASK_QUEUE_NAME}
      LOG_LEVEL: ${LOG_LEVEL}
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  worker-service:
    build:
      context: .
      dockerfile: ./apps/best_combination_worker/Dockerfile
    deploy:
      replicas: 3
    environment:
      MONGODB_URI: ${MONGODB_URI_INTERNAL}
      REDIS_URL: ${REDIS_URL_INTERNAL}
      RABBITMQ_URL: ${RABBITMQ_URL_INTERNAL}
      TASK_QUEUE_NAME: ${TASK_QUEUE_NAME}
      LOG_LEVEL: ${LOG_LEVEL}
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      api-service:
        condition: service_started
    restart: unless-stopped 

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      BACKEND_URL: ${BACKEND_URL}
    networks:
      - app-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      api-service:
        condition: service_started
      worker-service:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-simple-json-datasource
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local

